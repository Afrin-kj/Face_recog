import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import fetch_lfw_people
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.utils import to_categorical

# Load LFW people dataset, with at least 50 images per person
lfw = fetch_lfw_people(min_faces_per_person=50, resize=0.4)
X = lfw.images  # shape (n_samples, height, width)
y = lfw.target  # integer labels for persons
target_names = lfw.target_names  # names of persons

print(f"Dataset size: {X.shape[0]} images")
print(f"Image shape: {X.shape[1:]} pixels")
print(f"Number of classes: {len(target_names)}")

# Normalize images
X = X / 255.0

# Reshape to add channel dimension
X = X[..., np.newaxis]

# Convert labels to categorical
num_classes = len(target_names)
y_cat = to_categorical(y, num_classes)

# Split dataset
X_train, X_test, y_train, y_test = train_test_split(X, y_cat, test_size=0.2, random_state=42)

# Build simple CNN
model = models.Sequential([
    layers.Conv2D(32, (3,3), activation='relu', input_shape=X_train.shape[1:]),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(64, (3,3), activation='relu'),
    layers.MaxPooling2D((2,2)),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dense(num_classes, activation='softmax')
])

model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# Train CNN (small epochs for demo)
model.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.1)

# Evaluate on test set
loss, acc = model.evaluate(X_test, y_test)
print(f"Test accuracy: {acc*100:.2f}%")

# Predict on test images and show few results
preds = model.predict(X_test)
pred_labels = np.argmax(preds, axis=1)
true_labels = np.argmax(y_test, axis=1)

# Show 5 test images with predicted and true labels
for i in range(5):
    plt.imshow(X_test[i].squeeze(), cmap='gray')
    plt.title(f"True: {target_names[true_labels[i]]}\nPredicted: {target_names[pred_labels[i]]}")
    plt.axis('off')
    plt.show()
